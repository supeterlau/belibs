(kubernetes, docker/container, IaaS)

https://jimmysong.io/kubernetes-handbook/cloud-native/quick-start.html

Kubernetes 除了支持 Docker 之外，还支持其他几种容器平台

Kubernetes 运行在节点 (node) 上，节点是集群中的单个机器。如果你有自己的硬件，节点可能对应于物理机器，但更可能对应于在云中运行的虚拟机。节点是部署你的应用或服务的地方，是 Kubernetes 工作的地方。有 2 种类型的节点 ——master 节点和 worker 节点，所以说 Kubernetes 是主从结构的。

Master 节点本身也包含一个名为 API Server 的组件

一个 Kubernetes pod 通常包含一个或多个 Docker 容器，所有的容器都作为一个单元来管理

Kubernetes 中的 service 是一组逻辑上的 pod。把一个 service 看成是一个 pod 的逻辑分组，它提供了一个单一的 IP 地址和 DNS 名称，你可以通过它访问服务内的所有 pod

ReplicationController 或 ReplicaSet 负责实际管理 pod 生命周期的组件 —— 当收到指令时或 pod 离线或意外停止时启动 pod，也会在收到指示时杀死 pod

  Master 节点的中有一个子系统叫做 Deployment Controller，负责实际执行并使当前状态不断趋向于所需状态。

  如果你目前有 2 个 pod 的副本，而你所希望的状态应该有 3 个，那么 Replication Controller 或 ReplicaSet 会自动检测到这个要求，并指示 Deployment Controller 根据预定义的设置部署一个新的 pod。

kubectl 是一个命令行工具，用于与 Kubernetes 集群和其中的 pod 通信
kubernetes Ingress 和 Egress 网络

  设置安全规则允许哪些流量可以进入和离开 “服务器” (pod)，就像我们为托管应用程序的服务器定义安全规则一样。

  进入 Kubernetes pod 的流量称为 Ingress，而从 pod 到集群外的出站流量称为 egress

  定义入口和出口策略之前，你必须首先启动被称为 Ingress Controller（入口控制器）的组件；这个在集群中默认不启动。有不同类型的入口控制器，Kubernetes 项目默认只支持 Google Cloud 和开箱即用的 Nginx 入口控制器。通常云供应商都会提供自己的入口控制器

服务网格 (Service Mesh) 用于管理服务之间的网络流量

  服务网格利用容器之间的网络设置来控制或改变应用程序中不同组件之间的交互
  假设你想测试 Nginx 的新版本，检查它是否与你的 Web 应用兼容。你用新的 Nginx 版本创建了一个新的容器 (Container2)，并从当前容器 (Container1) 中复制了当前的 Nginx webserver 配置。但你不想影响组成 web 应用的其他微服务（假设每个容器对应一个单独的微服务）—— 就是 MySQL 数据库、Node.js 前端、负载均衡器等。

  所以使用服务网格，你可以立即只把 webserver 微服务改成 Container2（新 Nginx 版本的那个）进行测试。如果确定它不能工作，比如因为它导致网站出现一些兼容性问题，那么你就调用服务网格来快速切换回原来的 Container1。而这一切都不需要对其他容器进行任何配置变更 —— 这些变更对其他容器是完全透明的。

监控工具 Kubernetes 提供了应用程序在集群的每个层次上的资源使用情况的详细信息 —— 容器、pod、服务。这些详细信息使你能够评估应用程序的性能，确定哪些瓶颈可以解决以提高整体性能。

  Kubernetes 包含两个内置度量收集工具用于监控：资源管道和全度量管道。资源管道是一个较低级和较有限的工具，主要集中在与各种控制器相关的指标上。全指标管道，顾名思义，从几乎所有集群组件中获取并显示更丰富的指标。

  还有一些第三方工具可以安装并集成到 Kubernetes 集群中。对于 Kubernetes 来说，最普遍使用的两个工具是 Prometheus 和 Grafana。

警报

- play-with-kubernetes

https://labs.play-with-k8s.com/

内置kubeadm
在Kubernetes集群中创建的服务无法通过外网访问，只能在Play with Kubernetes的网络内访问

pulumi
  https://www.pulumi.com/


https://www.servicemesher.com/istio-handbook/ Istio Handbook